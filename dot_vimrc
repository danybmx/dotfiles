if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/bundle')

" General
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'christoomey/vim-system-copy'
Plug 'christoomey/vim-sort-motion'
Plug 'editorconfig/editorconfig-vim'

" Fuzzy
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Colorscheme
Plug 'rakr/vim-one'

" Text objects
Plug 'michaeljsmith/vim-indent-object'

" Frontend
Plug 'othree/html5.vim'
Plug 'stephpy/vim-yaml'
Plug 'cakebaker/scss-syntax.vim'
Plug 'posva/vim-vue'
Plug 'mattn/emmet-vim'

" Serverside
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'phpactor/phpactor', {'for': 'php', 'branch': 'master', 'do': 'composer install --no-dev -o'}

" COC
Plug 'neoclide/coc.nvim', {'branch': 'release'}

call plug#end()

set nocompatible
filetype plugin indent on

set cursorline
set background=dark
set termguicolors
colorscheme one

let mapleader = ","

set hidden
set backspace=2    " Backspace deletes like most programs in insert mode
set nobackup       " Skip backup files
set nowritebackup  " Skip backup files
set noswapfile     " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287
set history=100    " Set changes history to 100 for allow more undos!
set ruler          " show the cursor position all the time
set showcmd        " display incomplete commands
set incsearch      " do incremental searching
set laststatus=2   " Always display the status line
set autowrite      " Automatically :write before running commands
set modelines=0    " Disable modelines as a security precaution
set nomodeline     " Set nomodeline
set number         " Show line numbers
set relativenumber " Relative numbers
set numberwidth=5  " Set a fixed width for numbers
set nowrap         " Set nowrap
set tabstop=2      " Set tab size to 2
set shiftwidth=2   " Set tab spaces to 2
set shiftround     " Round shift size
set expandtab      " Expand tabs to spaces by default
set updatetime=300
set signcolumn=yes
set textwidth=100
set colorcolumn=+1

" Show invisibile characters
set list listchars=tab:»·,trail:·,nbsp:·,space:·

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Add folders to path recursively
set path+=**
set wildignore+=**/node_modules/**
set wildignore+=**/vendor/**

" Plugins configurations

" Lightline powerline
let g:lightline = {
      \ 'colorscheme': 'one',
      \ 'component': {
      \   'lineinfo': '⭡ %3l:%-2v',
      \ },
      \ 'component_function': {
      \   'readonly': 'LightlineReadonly',
      \   'fugitive': 'LightlineFugitive'
      \ },
      \ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
      \ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" }
      \ }
function! LightlineReadonly()
  return &readonly ? '⭤' : ''
endfunction
function! LightlineFugitive()
  if exists('*FugitiveHead')
    let branch = FugitiveHead()
    return branch !=# '' ? '⭠ '.branch : ''
  endif
  return ''
endfunction

" Keymaps

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l

" Always use vertical diffs
set diffopt+=vertical

" Fix escape delay
set timeoutlen=1000
set ttimeoutlen=0

" Switch between the last two files
nnoremap <Leader><Leader> <C-^>

" Get off my lawn
nnoremap <Left> :echoe "Use h"<CR>
nnoremap <Right> :echoe "Use l"<CR>
nnoremap <Up> :echoe "Use k"<CR>
nnoremap <Down> :echoe "Use j"<CR>

" ,x for delete buffers
nmap <leader>x :bd<cr>
imap <leader>x :bd<cr>
map <leader>x :bd<cr>

" FZF
nnoremap <leader>f :Files<CR>
nnoremap <leader>g :Rag<CR>
nnoremap <leader>b :Buffers<CR>

" FZF
let $FZF_DEFAULT_COMMAND='rg --files --smart-case'

" Custom
augroup vimrcEx
  autocmd!
  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
        \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
        \   exe "normal g`\"" |
        \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint,prettier}rc set filetype=json
  autocmd BufRead,BufNewFile *.blade.php set filetype=blade
  autocmd Filetype java,go setlocal tabstop=4 shiftwidth=4
augroup END
